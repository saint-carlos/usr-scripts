#!/bin/bash

# ls
__LS_FLAGS="-Fh --time-style long-iso"
alias lsd='ls -d'
alias llx='ll -X'
alias lld='ll -d'
alias lla='ll -A'
alias tree='tree -CshF --dirsfirst'

# processes
alias psx='ps -e -o pid,ppid,user,flags,stat,wchan:16,tty,start,cmd -ww | less'
cmd_exists htop && alias top='htop'

# misc
__COREUTILS_FLAGS="-v"
alias du='du -hs'
alias df='df -h'
alias findc='findgrep -c -t cpp -t cc -t hpp'
if cmd_exists colordiff; then
	alias diff='colordiff -U20'
else
	alias diff='diff -U20'
fi

gopen()
{
	local -r FILE="$(realpath --no-symlinks "$1")"
	gui xdg-open "file://$FILE"
}

shopt -s dirspell
bind "set completion-ignore-case on"
bind "set completion-map-case on"
bind "set match-hidden-files off"
bind "set visible-stats on"
bind "set completion-prefix-display-length 5"
bind "set skip-completed-text on"
# Alt + arrows for whitespace-separated words, Ctrl + arrows for any word
bind '"\e[1;3C":vi-fWord'
bind '"\e[1;3D":vi-bWord'

export LESS='--LONG-PROMPT --RAW-CONTROL-CHARS --ignore-case --window=-4 --jump-target=4 -PM?f"%f":<PIPE>. | ln %lt-%lb?L/%L. | pg %db?B/%D.?e | 100\% (END):?pm | %Pm\%..'
export GREP_COLORS="fn=35;1" # grep filename color is brighter

unset MAIL MAILCHECK MAILPATH # don't check mail

# more informative trace when debugging bash scripts
export PS4='+ $(printf "%(%y-%m-%d/%H:%M:%S)T" -1)/${BASHPID}/${BASH_SOURCE##*/}:${BASH_LINENO}/${FUNCNAME-global}:${LINENO}: '

WORKSPACE=CONFIG_WORKSPACE
for REPO_ROOT in "$WORKSPACE" CONFIG_REPO_DIRS; do
	if [ -d "$REPO_ROOT" ]; then
		REPOSITORY_ROOTS="$REPOSITORY_ROOTS $REPO_ROOT"
	fi
done
export REPOSITORY_ROOTS

__UNDERLINE="$(tput smul)"
__NOUNDERLINE="$(tput rmul)"
__STANDOUT="$(tput smso)"
__NOSTANDOUT="$(tput rmso)"
__PROMPT_ERROR_COLOR="$(__color_seq red)"
__PROMPT_NEWLINE_COLOR="$(__color_seq cyan)"
if [ -n "${SSH_CLIENT-}" ]; then
	__MAKE_UNDERLINE='\['"$__UNDERLINE"'\]'
	__MAKE_NOUNDERLINE='\['"$__NOUNDERLINE"'\]'
else
	__MAKE_UNDERLINE=""
	__MAKE_NOUNDERLINE=""
fi
if [[ "$TERM" =~ "screen" ]]; then
	__MAKE_STANDOUT='\['"$__STANDOUT"'\]'
	__MAKE_NOSTANDOUT='\['"$__NOSTANDOUT"'\]'
else
	__MAKE_STANDOUT=""
	__MAKE_NOSTANDOUT=""
fi
__USER=""
if CONFIG_PROMPT_USERNAME; then
	__USER='\u@'
fi
__HISTORY_NUM=""
if CONFIG_PROMPT_HISTORY_NUM; then
	__HISTORY_NUM='\! '
fi

if ! declare -F __git_ps1 > /dev/null; then
	if [ -f /usr/lib/git-core/git-sh-prompt ]; then
		# ubuntu 14.04
		source /usr/lib/git-core/git-sh-prompt
	elif [ -f /usr/share/git-core/contrib/completion/git-prompt.sh ]; then
		# centos 7.3
		source /usr/share/git-core/contrib/completion/git-prompt.sh
	fi
fi

__PROMPT_NEWLINE=$'\nV '
__set_prompt_missing_newline_fix()
{
	local CURPOS
	echo -en "\033[6n" # ANSI DSR
	read -s -d R CURPOS
	CURPOS=${CURPOS#*;}
	__PROMPT_NEWLINE_COLOR_SET=""
	if [ $CURPOS -eq 1 ]; then
		__MISSING_NEWLINE_FIX=""
	else
		__MISSING_NEWLINE_FIX="$__PROMPT_NEWLINE"
		__PROMPT_NEWLINE_COLOR_SET="$__PROMPT_NEWLINE_COLOR"
	fi
}

__shorten_path()
{
	sed -r 's,/([^/]{2})[^/]*,/\1,g'
}

# requires leading slash, which will be removed (once)
__dot_path()
{
	sed -r 's,((/[^/]*){2})/.*((/[^/]*){1}),\1/..\3,; s,^/,,'
}

__is_path_assigned()
{
	[ -n "$1" ] && [ "$1" != '.' ] && [ "$1" != '/' ]
}

__set_prompt_location_field()
{
	local PWD_MAXLEN=$((CONFIG_PWD_SCREEN_PERCENT * COLUMNS / 100))
	local PROJECT_PATH=''
	local PROJECT_HEAD=''
	local PROJECT_LOCATION=''
	local PROJECT_BASENAME=''
	local ABSOLUTE=false
	__LOCATION=""

	local GIT_REPO="$(git rev-parse --show-toplevel 2>/dev/null)"
	if [ -n "$GIT_REPO" ]; then
		local GIT_PREFIX="$(git rev-parse --show-prefix)"
		local GIT_HEAD=$(__git_ps1 "%s" 2>/dev/null)
		PROJECT_PATH="$(dirname "$GIT_REPO")"
		PROJECT_HEAD="$(basename "$GIT_REPO")${GIT_HEAD:+[${GIT_HEAD}]}"
		PROJECT_LOCATION=$(dirname "$GIT_PREFIX")
		PROJECT_BASENAME=$(basename "$GIT_PREFIX")

		if [[ "$REPOSITORY_ROOTS" =~ "$PROJECT_PATH" ]]; then
			PROJECT_PATH=''
		elif [[ "$PROJECT_PATH/" =~ ^"$HOME/" ]]; then
			PROJECT_PATH="~/${PROJECT_PATH##$HOME/}"
		else
			ABSOLUTE=true
		fi
	else
		if [[ "$PWD/" =~ ^$HOME/ ]]; then
			PROJECT_PATH='~'
			local PWD_NORMALIZED="$PWD/"
			local HOME_PATH="${PWD_NORMALIZED#"${HOME}/"}"
			PROJECT_LOCATION="$(dirname "$HOME_PATH")"
			PROJECT_BASENAME="$(basename "$HOME_PATH")"
		else
			ABSOLUTE=true
			PROJECT_PATH="$(dirname "$PWD")"
			PROJECT_BASENAME="$(basename "$PWD")"
		fi
	fi
	local TOTAL_LEN
	TOTAL_LEN=$(( ${#PROJECT_PATH} + ${#PROJECT_HEAD} + ${#PROJECT_LOCATION} + ${#PROJECT_BASENAME} ))
	if [ $TOTAL_LEN -gt $PWD_MAXLEN ]; then
		PROJECT_PATH="$(echo "$PROJECT_PATH" | __shorten_path)"
	fi
	TOTAL_LEN=$(( ${#PROJECT_PATH} + ${#PROJECT_HEAD} + ${#PROJECT_LOCATION} + ${#PROJECT_BASENAME} ))
	if [ $TOTAL_LEN -gt $PWD_MAXLEN ]; then
		PROJECT_PATH="$(echo "/$PROJECT_PATH" | __dot_path)"
	fi
	TOTAL_LEN=$(( ${#PROJECT_PATH} + ${#PROJECT_HEAD} + ${#PROJECT_LOCATION} + ${#PROJECT_BASENAME} ))
	if [ $TOTAL_LEN -gt $PWD_MAXLEN ]; then
		PROJECT_LOCATION="$(echo "/$PROJECT_LOCATION" | __dot_path)"
	fi
	TOTAL_LEN=$(( ${#PROJECT_PATH} + ${#PROJECT_HEAD} + ${#PROJECT_LOCATION} + ${#PROJECT_BASENAME} ))
	if [ $TOTAL_LEN -gt $PWD_MAXLEN ]; then
		PROJECT_LOCATION="$(echo "$PROJECT_LOCATION" | __shorten_path)"
	fi

	local SEP=''
	for PART in "$PROJECT_BASENAME" "$PROJECT_LOCATION" "$PROJECT_HEAD" "$PROJECT_PATH"; do
		if __is_path_assigned "$PART"; then
			__LOCATION="${PART}${SEP}${__LOCATION}"
			SEP=/
		fi
	done
	if "${ABSOLUTE}" && [ "${__LOCATION:0:1}" != '/' ]; then
		__LOCATION="/${__LOCATION}"
	fi

}

# PS0 takes the first 0 bytes of PS1, and is therefore empty.
# it's just a sneaky way to get the current time before executing the command,
# and using sneaky global variable assignment to during the dereference of PS1.
PS0='${PS1:$((__PS0_TIME=\D{%s}, 0)):0}\]'

__set_prompt_last_cmd_time()
{
	local -r NOW="$(printf "%(%s)T" -1)"
	: ${__PS0_TIME:=${NOW}}
	local -r PS0_TIMESTAMP="$(printf "%(%y-%m-%d-%H:%M:%S)T" "$__PS0_TIME")"
	local -r TOTAL_SECS=$((NOW - __PS0_TIME))
	__PS0_TIME='' # a subsequent blank command wouldn't run PS0
	local TOTAL_TIMESTAMP_SHORT=''
	local HOURS=$((TOTAL_SECS / 3600))
	if ((HOURS > 0)); then
		TOTAL_TIMESTAMP_SHORT+="${HOURS}h"
	fi
	local MINUTES=$(((TOTAL_SECS / 60) % 60))
	if ((MINUTES > 0)); then
		TOTAL_TIMESTAMP_SHORT+="${MINUTES}m"
	fi
	TOTAL_TIMESTAMP_SHORT+="$((TOTAL_SECS % 60))s"
	__LAST_CMD_TIME="^${PS0_TIMESTAMP}+${TOTAL_TIMESTAMP_SHORT} "
}

__set_prompt_last_cmd_status()
{
	__PROMPT_ERROR_COLOR_SET=""
	if [ $__STATUS -eq 0 ]; then
		__PROMPT_STATUS_DESC=""
	elif [ $__STATUS -gt 128 ] && [ $__STATUS -lt 192 ]; then # signal
		local SIG=$(kill -l $((__STATUS - 128)))
		__PROMPT_STATUS_DESC=" ($SIG)"
		case $SIG in
			HUP|ILL|ABRT|BUS|FPE|SEGV|STKFLT|SYS)
				__PROMPT_ERROR_COLOR_SET="$__PROMPT_ERROR_COLOR"
				;;
		esac
	else
		__PROMPT_STATUS_DESC=" (${__STATUS})"
		__PROMPT_ERROR_COLOR_SET="$__PROMPT_ERROR_COLOR"
	fi
}

__set_prompt_job_status()
{
	__PROMPT_BG_JOBS_SET=""
	__PROMPT_BG_JOBS_RESET=""
	if jobs | grep -q .; then
		__PROMPT_BG_JOBS_SET="$__UNDERLINE"
		__PROMPT_BG_JOBS_RESET="$__NOUNDERLINE"
	fi
}

__set_prompt()
{
	__STATUS=$? # must be first line ever of this function

	__set_prompt_missing_newline_fix
	__set_prompt_location_field
	__set_prompt_last_cmd_time
	__set_prompt_last_cmd_status
	__set_prompt_job_status

	# my shell ignores the return value of this function rather than
	# put it in $?, but i don't know about other shells
	return $__STATUS
}
PROMPT_COMMAND=__set_prompt
PS1="\[\${__PROMPT_NEWLINE_COLOR_SET}\]\${__MISSING_NEWLINE_FIX}${__PROMPT_COLOR_SET}${__HISTORY_NUM}\${__LAST_CMD_TIME}${__USER}${__MAKE_UNDERLINE}${__MAKE_STANDOUT}\h${__MAKE_NOSTANDOUT}${__MAKE_NOUNDERLINE}:\${__LOCATION:-\w}\[\${__PROMPT_ERROR_COLOR_SET}\]\${__PROMPT_STATUS_DESC}${__PROMPT_COLOR_SET}\[\${__PROMPT_BG_JOBS_SET}\]\\\$\[\${__PROMPT_BG_JOBS_RESET}\]${__PROMPT_COLOR_RESET} "

__get_working_copy()
{
	if [ $# -eq 0 ]; then
		return
	fi
	if [ $# -eq 1 ]; then
		for REPO_ROOT in $REPOSITORY_ROOTS; do
			if [ -d "$REPO_ROOT/$1" ]; then
				WORKING_COPY="$REPO_ROOT/$1"
				break
			fi
		done
	fi
	if [ -z "$WORKING_COPY" ]; then
		set $(echo "$@" | sed 's/[1-9][1-9]*/ & /g') # shorthand: a1b -> a 1 b
		REPOS=$(echo "$REPOSITORY_ROOTS " | sed 's|^ *||; s| |/* |g') # append /* to repos
		LIST=$(\ls -u1d $REPOS) # list by access time from most recent
		for ITEM in "$@"; do
			LIST=$(echo "$LIST" | \grep -i /[^/]*$ITEM[^/]*$) # grep the basename
		done
		WORKING_COPY=$(echo "$LIST" | sed 1q)
	fi
	[ -n "$WORKING_COPY" ] && CONFIG_DESKTOP && termset $(basename "$WORKING_COPY")
	echo "$WORKING_COPY"
}

__jump_working_copy()
{
	cd $(__get_working_copy "$@")
}

# 'j' jumps around the user's working directoy using short mnemonics
alias j="__jump_working_copy"
