set runtimepath^=CONFIG_LIB/vim

" general {{{

set nocompatible        " Disable vi compatibility.
set nobackup            " Do not keep a backup file.
set iskeyword=@,48-57,_
set noerrorbells        " No beeps.
set magic               " Use 'magic' patterns (extended regular expressions).
set hidden		" allow movement to another buffer without saving the current one
set tags+=./tags;	" tell vim to find ctags even if in a subdirectory.
let mapleader = ","
let maplocalleader = mapleader

if &g:term =~# "rxvt-unicode"
	" work around urxvt's Alt key issues
	" need to map any Alt key combination we're going to use.
	set <M-j>=j
	set <M-k>=k
endif

nnoremap <M-j> gj
nnoremap <M-k> gk

" }}}

" view {{{

set showcmd             " Show (partial) command in status line.
set cmdheight=2		" height of the command line
set number		" show line numbers
set signcolumn=number	" if something uses the gutter, reuse the number column
set showmode            " Show current mode.
set nomodeline          " turns out to be very annoying
set background=dark	" bright terminal colors
set wildmenu		" display file list when browsing files to open
set wildmode=list:longest " bash-like file completion
set laststatus=2	" When to show a statusline.
set display=lastline	" display the part of last line that fits in the window

set splitright
set splitbelow

" status line, left side
set statusline=
set statusline+=B:%*%-3.3n%0*                  " buffer number
set statusline+=%f                             " file name
set statusline+=\ [%{strlen(&ft)?&ft:'none'}   " filetype
set statusline+=%R%M]                          " flags
" status line, right side
set statusline+=%=                             " right align
set statusline+=A:%*0x%-8B                     " current char
set statusline+=L:%-16.(%l/%L(%p%%),\ C:%c%V%) " location of cursor in file - line#/total(percentage), column

" }}}

" buffer view {{{

set tabstop=8		" tab width
set linebreak		" wrap on words, not characters
set showmatch           " Show matching brackets.
set matchpairs+=<:>	" '<' and '>' are considered matching brackets
set listchars=tab:>-,trail:$,extends:> " how to display whitespace when asked
set whichwrap=b,s,<,>,[,] " keys which can move the cursor to another line
set diffopt+=context:20	" 20 context lines in diff

if has("syntax")
	syntax on

	" syntax highlight shell scripts as per POSIX, not the original Bourne shell which very few use
	let g:is_posix = 1
endif

augroup bufferview
	autocmd!
	autocmd BufNewFile,BufRead gitconfig setfiletype gitconfig
	autocmd BufNewFile,BufRead xdefaults,xdefaults.* setfiletype xdefaults
	autocmd FileType log setlocal autoread nomodifiable readonly
	autocmd InsertEnter * set timeoutlen=0 " no fancy mappings in insert mode
	autocmd InsertLeave * set timeoutlen=1000
augroup END
set ttimeoutlen=0

" }}}

" search & highlight {{{

set ignorecase          " Case insensitive matching.
set smartcase		" If search contains capitals, search exact case.
set incsearch           " Incremental search.
set hlsearch            " Highlight search matches.

highlight Normal guifg=White guibg=Black

" Disable highlighting
noremap <silent> ; :nohlsearch<CR>

set spelllang=en_us
set nospell
noremap <silent> <F6> :setlocal spell!<CR>
imap <F6> <C-o><F6>

hi ColorColumn guibg=#303030 ctermbg=4
let s:color_column_old = 81
function! s:ToggleColorColumn()
    if !exists("b:color_column_old")
	    let b:color_column_old = s:color_column_old
    endif
    if b:color_column_old == 0
        let b:color_column_old = &colorcolumn
        let &l:colorcolumn = 0
    else
        let &l:colorcolumn = b:color_column_old
        let b:color_column_old = 0
    endif
endfunction
noremap <silent> <F2> :call <SID>ToggleColorColumn()<CR>
imap <F2> <C-o><F2>

" search selected string
vnoremap // y/<C-R>"<CR>

" }}}

" formatting {{{

set shiftwidth=8	" indentation width
set textwidth=0         " Don't wrap words by default.

filetype plugin indent on

augroup formatting
	autocmd!
	autocmd FileType make setlocal noexpandtab "'tab' means 'tab' in makefiles
augroup END

" }}}

" editing {{{

set history=100         " Number of lines of command line history.
set undolevels=200      " Number of undo levels.
set gdefault            " Use 'g' flag by default with :s/foo/bar/.
set backspace=indent,eol,start " Allow backspacing over everything in insert mode.
set complete=k,.,w,b	" autocomplete from these places
set autoindent		" indent a new line like the previous line
set nocopyindent	" don't reuse current indentation for next line

augroup editing
	autocmd!
	autocmd BufWritePost {,.}vimrc source ~/.vimrc " reload vimrc files if edited
	autocmd FileType vim setlocal foldmethod=marker
augroup END

" inoremap <silent> <C-o> <C-x><C-o>
vnoremap . :s/^/> /<CR>:nohlsearch<CR>

" yank to clipboard
nnoremap YY "+yy
vnoremap Y "+y

" wrap selection with stuff
" we start with the closer since the opener changes the position of the
" selection, e.g. when we insert the first '"' it moves the selected text by
" one character.
vnoremap <leader>" <Esc>`>a"<Esc>`<i"<Esc>
vnoremap <leader>' <Esc>`>a'<Esc>`<i'<Esc>
vnoremap <leader>` <Esc>`>a`<Esc>`<i`<Esc>
vnoremap <leader>( <Esc>`>a)<Esc>`<i(<Esc>
vnoremap <leader>[ <Esc>`>a]<Esc>`<i[<Esc>
vnoremap <leader>{ <Esc>`>a}<Esc>`<i{<Esc>
vnoremap <leader>< <Esc>`>a><Esc>`<i<<Esc>
vnoremap <leader><Tab> <Esc>`>a``<Esc>`<i``<Esc>

" hebrew support
noremap <silent> <F7> :setlocal rightleft! \| setlocal hkmap!<CR>
imap <F7> <C-o><F7>

" interaction with other terminals
function GutterToggle()
	if &signcolumn ==# "number"
		set signcolumn=no
	elseif &signcolumn ==# "no"
		set signcolumn=number
	endif
endfunction
noremap <silent> <F8> :setlocal paste! \| setlocal number!<CR>:TbToggle<CR>:call GutterToggle()<CR>
imap <F8> <C-o><F8>

" default readline bindings
inoremap <C-a> <C-o>^
inoremap <C-e> <End>
inoremap <M-b> <C-o>b
inoremap <M-f> <C-o>e<Right>
inoremap <C-k> <C-o>d$
inoremap <C-u> <C-o>d0
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-k> <C-f>D<C-c><C-c>:<Up>

" these turned out to be annoying
" imap ( ()<left>
" imap [ []<left>
" imap < <><left>

" }}}

" plugins {{{

"	cscope {{{
" not strictly a plugin, but an external feature to be configured

if has("cscope")
	set cscopetag		" consult cscope before ctags for :tag jump
	set cscopetagorder=0	" boolean: should ctags be queried before cscope?
	set nocscopeverbose	" non verbose mode (when adding a database)

	if exists($CSCOPE_DB) " add database pointed to by environment
		cs add $CSCOPE_DB
	else " add any database in current directory
		let s:cscope_file=findfile("cscope.out", ".;")
		let s:cscope_pre=matchstr(s:cscope_file, ".*/")
		if !empty(s:cscope_file) && filereadable(s:cscope_file)
			exec "cs add" s:cscope_file s:cscope_pre
		endif
	endif

	if !empty(s:cscope_file)
		" CScope related mappings.
		" Original CScope commands (as issued via ':cs find <querytype>'):
		"	0 or s: Find this C symbol
		"	1 or g: Find this definition
		"	2 or d: Find functions called by this function
		"	3 or c: Find functions calling this function
		"	4 or t: Find this text string
		"	6 or e: Find this egrep pattern
		"	7 or f: Find this file
		"	8 or i: Find files #including this file

		" map ,cX to :cs find X
		nnoremap <localleader>cs :cs find s <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>c0 :cs find s <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>c1 :cs find g <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>cd :cs find d <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>c2 :cs find d <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>cc :cs find c <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>c3 :cs find c <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>ct :cs find t <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>c4 :cs find t <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>ce :cs find e <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>c6 :cs find e <C-R>=expand("<cword>")<CR><CR>
		nnoremap <localleader>cf :cs find f <C-R>=expand("<cfile>")<CR><CR>
		nnoremap <localleader>c7 :cs find f <C-R>=expand("<cfile>")<CR><CR>
		nnoremap <localleader>ci :cs find i <C-R>=expand("<cfile>")<CR><CR>
		nnoremap <localleader>c8 :cs find i <C-R>=expand("<cfile>")<CR><CR>
	endif
endif

"	}}}

"	TabBar {{{

" For TabBar plugin: set up tab bar depending on screen width:
if &columns <= 115 "screen NOT wide enough for vertical tabbar:
	" make tab bar multiline (use as many lines as necessary) and make sure
	" no tab is 'cut' to next line:
	let g:Tb_TabWrap = 1
	let g:Tb_MaxSize = 0
	let g:Tb_SplitBelow = 0
else " screen wide-enough for vertical tabbar:
	" open tab bar side-by-side with main window, on the right:
	let g:Tb_VSplit = 1
	let g:Tb_MinSize = 25
	let g:Tb_MaxSize = 25
	let g:Tb_SplitBelow = 1
endif
let g:Tb_ToggleMoreThanOne = 1

" For TabBar plugin: prevent from opening when in diff mode.
if &diff
	let g:V_DirDiffRunning = 1
endif

" For TabBar plugin: allow single-click tab switching
let g:Tb_UseSingleClick = 1

" cycles tabs
nnoremap <Tab> :Tbbn<CR>
nnoremap <S-Tab> :Tbbp<CR>

"	}}}

"	FSwitch {{{

let g:fsnonewfiles = 1
let g:fsfullsearch = 1
augroup FSwitch
	autocmd!
	autocmd Filetype c,cpp,h,hpp noremap <buffer> <C-h> :FSHere<CR>
augroup END

"	}}}

"	CtrlP {{{

let g:ctrlp_clear_cache_on_exit = 0

"	}}}

"	Man {{{

runtime ftplugin/man.vim

"	}}}

" }}}

" Correct typos {{{
" this gets its own section because its large and stupid.

"	general {{{
iab beacuse	because
iab becuase	because
iab acn		can
iab cna		can
iab centre	center
iab chnage	change
iab chnages	changes
iab chnaged	changed
iab chnagelog	changelog
iab Chnage	Change
iab Chnages	Changes
iab ChnageLog	ChangeLog
iab debain	debian
iab Debain	Debian
iab defualt	default
iab Defualt	Default
iab differnt	different
iab diffrent	different
iab emial	email
iab Emial	Email
iab figth	fight
iab figther	fighter
iab fro		for
iab fucntion	function
iab ahve	have
iab homepgae	homepage
iab logifle	logfile
iab lokk	look
iab lokking	looking
iab mial	mail
iab Mial	Mail
iab miantainer	maintainer
iab amke	make
iab mroe	more
iab nwe		new
iab recieve	receive
iab recieved	received
iab erturn	return
iab retrun	return
iab retunr	return
iab seperate	separate
iab shoudl	should
iab soem	some
iab taht	that
iab thta	that
iab teh		the
iab tehy	they
iab truely	truly
iab waht	what
iab wiht	with
iab whic	which
iab whihc	which
iab yuo		you
iab databse	database
iab versnio	version
iab obnsolete	obsolete
iab flase	false
iab recrusive	recursive
iab Recrusive	Recursive
"	}}}

"	Days {{{
iab monday	Monday
iab tuesday	Tuesday
iab wednesday	Wednesday
iab thursday	Thursday
iab friday	Friday
iab saturday	Saturday
iab sunday	Sunday
" }}}

"	Months {{{
iab january	January
iab february	February
" iab march	March
iab april	April
" iab may	May
iab june	June
iab july	July
iab august	August
iab september	September
iab october	October
iab november	November
iab december	December
"	}}}

" }}}
