set runtimepath^=LIB_PLACEHOLDER/vim

" general
" =======

set nocompatible        " Disable vi compatibility.
set nobackup            " Do not keep a backup file.
set iskeyword=@,48-57,_
set noerrorbells        " No beeps.
set magic               " Use 'magic' patterns (extended regular expressions).

" tell vim to find ctags even if in a subdirectory.
set tags=./tags,tags,../tags,../../tags,../../../tags,../../../../tags,../../../../../tags,../../../../../../tag,../../../../../../../tags,../../../../../../../../tag

" view
" ====

set showcmd             " Show (partial) command in status line.
set cmdheight=2		" height of the command line
set number		" show line numbers
set showmode            " Show current mode.
set ruler               " Show the line and column numbers of the cursor.
set modeline            " Enable modeline. BE CAREFUL WITH THAT!!!
set background=dark	" bright terminal colors
set wildmenu		" display file list when browsing files to open
set wildmode=list:longest " bash-like file completion
set laststatus=2	" When to show a statusline.

" buffer view
" ===========

set tabstop=8		" tab width
set linebreak		" wrap on words, not characters
set showmatch           " Show matching brackets.
set listchars=tab:>-,trail:.,extends:> " how to display whitespace when asked
set whichwrap=b,s,<,>,[,] " keys which can move the cursor to another line

if has("syntax")
	syntax on
endif

" syntax highlight shell scripts as per POSIX, not the original Bourne shell which very few use
let g:is_posix = 1

" search & highlight
" ==================

set ignorecase          " Case insensitive matching.
set smartcase		" If search contains capitals, search exact case.
set incsearch           " Incremental search.
set hlsearch            " Highlight search matches.

highlight Normal guifg=White guibg=Black

" formatting
" ==========

set autoindent		" indent a new line like the previous line
set smartindent		" rudimentary c-like indent
set shiftwidth=8	" indentation width
set textwidth=0         " Don't wrap words by default.

filetype plugin indent on

autocmd FileType make setlocal noexpandtab "'tab' means 'tab' in makefiles

" editing
" =======

set history=100         " Number of lines of command line history.
set undolevels=200      " Number of undo levels.
set gdefault            " Use 'g' flag by default with :s/foo/bar/.
set backspace=indent,eol,start " Allow backspacing over everything in insert mode.

autocmd! BufWritePost {,.}vimrc source ~/.vimrc " reload vimrc files if edited

" F5: left to right
" F6: right to left.
map <F5> %s/\s\+$//
map  <F5> <Esc>:set guifont=FreeSans<CR>:set norightleft<CR>:set nohk<CR>i
map! <F5> <Esc>:set guifont=FreeSans<CR><Esc>:set norightleft<CR>:set nohk<CR>a
map  <F6> <Esc>:set guifont=-Hebrew-Bible-Medium-R-Normal--16-160-75-75-M-80-ISO8859-8<CR><Esc>:set rightleft<CR>:set hk<CR>i
map! <F6> <Esc>:set guifont=-Hebrew-Bible-Medium-R-Normal--16-160-75-75-M-80-ISO8859-8<CR><Esc>:set rightleft<CR>:set hk<CR>a
map! <F8> <Esc>:w<CR>i
map  <F8> :w<CR>

" plugins
" =======

" --- cscope ---
" not strictly a plugin, but an external feature to be configured

if has("cscope")
	set cscopetag	" treat scsope tags like ctags
	set csto=0	" boolean: should ctags be queried before cscope?
	set cst		" consult cscope before ctags for :tag jump
	set nocsverb	" non verbose mode (when adding a database)

	if filereadable("cscope.out") " add any database in current directory
		cs add cscope.out
	elseif $CSCOPE_DB != "" " else add database pointed to by environment
		cs add $CSCOPE_DB
	endif

	if filereadable("../cscope.out")
		cs add ../cscope.out
	endif
	if filereadable("../../cscope.out")
		cs add ../../cscope.out
	endif
	if filereadable("../../../cscope.out")
		cs add ../../../cscope.out
	endif
	if filereadable("../../../../cscope.out")
		cs add ../../../../cscope.out
	endif
	if filereadable("../../../../../cscope.out")
		cs add ../../../../../cscope.out
	endif
	if filereadable("../../../../../../cscope.out")
		cs add ../../../../../../cscope.out
	endif
	if filereadable("../../../../../../../cscope.out")
		cs add ../../../../../../../cscope.out
	endif
	if filereadable("../../../../../../../../cscope.out")
		cs add ../../../../../../../../cscope.out
	endif

	" CScope related mappings.
	" Original CScope commands (as issued via ':cs find <querytype>'):
	"	0 or s: Find this C symbol
	"	1 or g: Find this definition
	"	2 or d: Find functions called by this function
	"	3 or c: Find functions calling this function
	"	4 or t: Find this text string
	"	6 or e: Find this egrep pattern
	"	7 or f: Find this file
	"	8 or i: Find files #including this file

	" map \cX to :cs find X
	nmap <Leader>cs :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>c0 :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>c1 :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>cd :cs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>c2 :cs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>cc :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>c3 :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>ct :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>c4 :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>ce :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>c6 :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <Leader>cf :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <Leader>c7 :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <Leader>ci :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <Leader>c8 :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
endif

" --- TabBar ---

" For TabBar plugin: set up tab bar depending on screen width:
"if &columns <= 125 "screen NOT wide enough for vertical tabbar:
if &columns <= 115 "screen NOT wide enough for vertical tabbar:
    " make tab bar multiline (use as many lines as necessary) and make sure
    " no tab is 'cut' to next line:
    let g:Tb_TabWrap = 1
    let g:Tb_MaxSize = 0
else " screen wide-enough for vertical tabbar:
    " open tab bar side-by-side with main window, on the right:
    let g:Tb_VSplit = 1
    let g:Tb_SplitBelow = 1
    let g:Tb_MinSize = 25
    let g:Tb_MaxSize = 25
endif

" For TabBar plugin : prevent from opening when in diff mode. From help :
"   In your .vimrc file you could do something special when Vim was
"   started in diff mode.  You could use a construct like this:
"     if &diff
"         setup for diff mode
"     else
"         setup for non-diff mode
"     endif
" For this to work, tabbar.vim must be patched with the following IF right
" at the beginning, obviously :
"   if exists("g:V_DirDiffRunning")
"       finish
"   endif
if &diff
    let g:V_DirDiffRunning = 1
endif

" For TabBar plugin: allow single-click tab switching
let g:Tb_UseSingleClick = 1

" --- FSwitch ---

let g:fsnonewfiles = 1
map <C-h> :FSHere<CR>

" Correct typos
" =============
" this gets its own section because its large and stupid.

iab beacuse    because
iab becuase    because
iab acn        can
iab cna        can
iab centre     center
iab chnage     change
iab chnages    changes
iab chnaged    changed
iab chnagelog  changelog
iab Chnage     Change
iab Chnages    Changes
iab ChnageLog  ChangeLog
iab debain     debian
iab Debain     Debian
iab defualt    default
iab Defualt    Default
iab differnt   different
iab diffrent   different
iab emial      email
iab Emial      Email
iab figth      fight
iab figther    fighter
iab fro        for
iab fucntion   function
iab ahve       have
iab homepgae   homepage
iab logifle    logfile
iab lokk       look
iab lokking    looking
iab mial       mail
iab Mial       Mail
iab miantainer maintainer
iab amke       make
iab mroe       more
iab nwe        new
iab recieve    receive
iab recieved   received
iab erturn     return
iab retrun     return
iab retunr     return
iab seperate   separate
iab shoudl     should
iab soem       some
iab taht       that
iab thta       that
iab teh        the
iab tehy       they
iab truely     truly
iab waht       what
iab wiht       with
iab whic       which
iab whihc      which
iab yuo        you
iab databse    database
iab versnio    version
iab obnsolete  obsolete
iab flase      false
iab recrusive  recursive
iab Recrusive  Recursive
