#!/bin/bash
##########################################################################
# Title      :	errno - show messages to system errors
# Author     :	Heiner Steven <heiner.steven@odn.de>
# Date       :	1995-07-19
# Requires   :	xargs
# Category   :	Programming
# SCCS-Id.   :	@(#) errno	1.5 03/11/04
##########################################################################
# Description
#    -	Searches the systems "errno.h" include file, and extracts all
#	error numbers with descriptions
#    -	The processed ERRNO-table will be cached for faster lookup
#
# Note
#    o	Needs the following non-standard programs or features:
#	    xargs, "find ... -follow"
##########################################################################

PROGRAM=$(basename $0)
VER='1.5'
DESCRIPTION="print name and description of error codes, $VER (stv '95)"
PARAMS="{number|name|regex} [...]"
OPTIONS="[-hl]"
ERRNOS=/tmp/$PROGRAM

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS
number:	system error number, i.e. 10
name:	system error name, i.e. EPERM
regex:	string to grep for

options:
-l	list: list all error codes
-h	help: show this help message and exit.
EOF

    exit $1
}

die()
{
	RC=$1
	shift
	errcho "$*"
	exit $RC
}

# Check arguments before setting them
getopt hl "$@" > /dev/null 2>&1	|| usage 1
set -- `getopt hl "$@"`
while [ $# -gt 0 ]
do
	case "$1" in
		-l) set -- .; break ;;
		--) shift; break ;;
		-h) usage 0 ;;
		-*) usage 1 ;;
		*) break;;
	esac
	shift
done

[ $# -ge 1 ] || usage 1

[ -s "$ERRNOS" ] || {
	errcho "creating errno table (will be cached for faster lookup)..."
	umask 000
	: ${INCLUDE=/usr/include}
	find $(echo "$INCLUDE" | tr : ' ') -follow -type f -name 'errno*.h' -print | \
		sort -u | xargs awk '
			# Create "database" of errno values in the following format:
			# 2	ENOENT	No such file or directory

			# Example:
			# #define ENOENT          2    /* No such file or directory */
			($1 == "#define") && ($2 ~ /^E[A-Z][A-Z]*$/) && (NF >= 3) {
			    # $2=name, $3=errno
			    Desc = ""
			    for ( i=4; i<=NF; i++ ) {
				if ( $i == "/*" || $i == "*/" ) continue;
				# Remove comment delimiters from description:
				#	"/*Not owner*/" -> "Not owner"
				if ( $i ~ /^\/\*/ ) {
				    sub (/\/\*[ 	]*/, "", $i)
				} else if ( $i ~ /\*\/$/ ) {
				    sub (/[ 	]*\*\/$/, "", $i)
				}
				if ( Desc == "" )
				    Desc = $i
				else
				    Desc = Desc " " $i
			    }
			    print $3 "	" $2 "	" Desc
			}
		' | sort -u > "$ERRNOS"
	[ -s "$ERRNOS" ] || die 1 "could not find include file(s)"
}

# Search "database" for given strings
for i in "$@"; do
	case "$i" in
		E[A-Z]*) COL=2 ;; # Symbolic name given
		*[!0-9]*) # No number: just grep for pattern
			grep -i "$i" "$ERRNOS"
			continue ;;
		*)	COL=1 ;; # This seems to be a number
	esac
	awk '$'$COL' == "'$i'"' "$ERRNOS"
done
