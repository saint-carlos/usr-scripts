#!/bin/bash
##########################################################################
# Title      :	base.sh - print number to different bases
# Author     :	Heiner Steven (stv). Improved by idank.
# Date       :	1995-03-07
# Requires   :	bc
# Category   :	Desktop
# SCCS-Id.   :	@(#) base.sh	1.3 04/02/18
##########################################################################
# Description
#
# Changes
# 21-03-95 stv	fixed error occuring with 0xb as input (0.2)
##########################################################################

VER=1.4
PROGRAM=$(basename $0)
DESCRIPTION="print number to different bases, $VER (stv '95)"
PARAMS="[number...]"
OPTIONS="[-bodxh] [-f|-p]"

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS
If no number is given, the numbers are read from standard input.
A number may be
binary (base 2)		starting with 0b (e.g. 0b1100)
octal (base 8)		starting with 0  (e.g. 014)
hexadecimal (base 16)	starting with 0x (e.g. 0xc)
decimal			otherwise (e.g. 12)

the number may be prefixed with width@ (e.g. 24@0xc), which confines
the number to its representation in a width of 24 bits.

options:
-b	binary: print the number in binary.
-o	octal: print the number in octal.
-d	decimal: print the number in decimal.
-x	hexadecimal: print the number in hexadecimal.
any combination of bases can be used. if no base is given at all, all bases are printed.
-p	no prefix: do not print prefixes.
-f	format: format the output numbers as the input numbers are formatted (0xF5, 030, 0b11 etc.) rather than naming the base in the output (bin=101 dec=5 etc.) which is the default.
-h	help: show this help message and exit.

exit status:
0	all arguments are OK
1	some arguments are bad
EOF

    exit $1
}

msg()
{
    errcho "$PROGRAM: $*"
}

print_one()
{
	BASE=$1
	NAME=$2
	DEC_INPUT=$3
	PREFIX=$4
	[ "$PREFIX_FORMAT" = long ] && PREFIX="${NAME}="
	[ "$PREFIX_FORMAT" = none ] && PREFIX=""
	echo "obase=$BASE; \"$PREFIX\"; $DEC_INPUT" | bc | sed -e 's: :	:g' | tr '\n' ' '
}

out_base()
{
	echo "$BASES" | grep -w "$1" > /dev/null
}

bitify()
{
	local -r BITS=${1%%@*}
	local -r N=${1##*@}

	local -r MASK=$(( (1 << BITS) -1 ))
	echo $((MASK & N))
}

print_bases()
{
	# Determine base of the number
	for i in "$@"; do
		case "$i" in
			*@*) i=$(bitify $i) ;;
		esac

		case "$i" in
			0b*)			IBASE=2 ;;	# binary
			0x*|[a-f]*|[A-F]*)	IBASE=16 ;;	# hexadecimal
			0*)			IBASE=8 ;;	# octal
			[1-9]*)			IBASE=10 ;;	# decimal
			*)
				msg "illegal number $i - ignored"
				continue ;;
		esac

		# Remove prefix, convert hex digits to uppercase (bc needs this)
		NUMBER=$(echo "$i" | sed -e 's:^0[bBxX]::' | tr 'a-f' 'A-F')

		# Convert number to decimal
		DEC=$(echo "ibase=$IBASE; $NUMBER" | bc)
		case "$DEC" in
			[0-9]*)	;;		# number ok
			*)	continue;;	# error: ignore
		esac

		out_base 16 && print_one 16 hex $DEC 0x
		out_base 10 && print_one 10 dec $DEC
		out_base 8 && print_one 8 oct $DEC 0
		out_base 2 && print_one 2 bin $DEC 0b
		echo
	done
}

BASES="2 8 10 16"
OPTION_BASES=""
PREFIX_FORMAT=long
while getopts hbodxfp OPTION; do
	case $OPTION in
		h) usage 0 ;;
		b) OPTION_BASES="$OPTION_BASES 2" ;;
		o) OPTION_BASES="$OPTION_BASES 8" ;;
		d) OPTION_BASES="$OPTION_BASES 10" ;;
		x) OPTION_BASES="$OPTION_BASES 16" ;;
		f) PREFIX_FORMAT=C ;;
		p) PREFIX_FORMAT=none ;;
		\?) usage 1 ;;
	esac
done
shift $((OPTIND - 1))

[ -n "$OPTION_BASES" ] && BASES="$OPTION_BASES"

if [ $# -gt 0 ]; then
	print_bases "$@"
else
	while read LINE
	do
		print_bases $LINE
	done
fi

exit 0
