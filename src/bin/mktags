#!/usr/bin/env bash

set -o pipefail -o errexit -o nounset

declare -r PROGRAM=$(basename $0)
declare -r DESCRIPTION="create tag files"
declare -r PARAMS=""
declare -r OPTIONS="[-hrs]"

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
${PROGRAM} - ${DESCRIPTION}
usage:
${PROGRAM} ${OPTIONS} ${PARAMS}

options:
-h	help: show this help message and exit.
-r	recreate: remove existing tag databases.
-s	shell: assume this is a shell project.

currently creates tags using ctags and cscope.

exit status:
0	if all arguments are OK
1	on indexing error
2	if some arguments are bad
EOF

    exit $1
}

main()
{

	declare CLEAN=false
	declare FORCE_SHELL=false
	while getopts hrs OPTION; do
	    case "${OPTION}" in
		h) usage 0 ;;
		r) CLEAN=true ;;
		s) FORCE_SHELL=true ;;
		*) usage 2 ;;
	    esac
	done
	shift $((OPTIND - 1))

	declare -r TOPLEVEL=$(git rev-parse --show-toplevel 2> /dev/null)
	cd "${TOPLEVEL}"

	if "${CLEAN}"; then
		rm -f tags cscope.*
	fi
	if cmd_exists ctags; then
		if "${FORCE_SHELL}"; then
			ctags --language-force=sh -R \
				--extra=+f \
				--fields=+klmnzt
		else
			ctags -R \
				--extra=+qf \
				--fields=+afiklmnsSzt
			ctags --list-maps \
				| sed --regexp-extended 's/ +/ /g' \
				| cut -d' ' -f2- \
				| tr ' ' '\n' \
				| xargs -L1 printf '%s "%s" ' '-o -name' \
				| xargs find . -false > cscope.files
		fi
	fi
	if ! "${FORCE_SHELL}" && cmd_exists cscope; then
		cscope -bqR || exit 1
	fi
}

main "$@"
