#!/bin/bash
##########################################################################
# Title      :	signal - show messages to system signal
# Author     :	Heiner Steven <heiner.steven@odn.de>
# Date       :	1995-07-19
# Requires   :	xargs
# Category   :	Programming
# SCCS-Id.   :	@(#) errno	1.5 03/11/04
##########################################################################
# Description
#    -	Searches the systems "signal.h" include file, and extracts all
#	signal numbers with descriptions
#    -	The processed ERRNO-table will be cached for faster lookup
#
# Note
#    o	Needs the following non-standard programs or features:
#	    xargs, "find ... -follow"
##########################################################################

PN=`basename "$0"`			# Program name
VER='1.5'

: ${NAWK:=awk}
: ${GREP:=grep}

Signals=/tmp/$PN.cache			# "database" with signals

Usage () {
    echo "$PN - print name and description of signal codes, $VER (stv '95)
usage: $PN {number|name|regex} [...]
   or  $PN -l
    -l 		list all signal numbers
    number	signal number, i.e. 10
    name	signal name, i.e. SIGSEGV
    regex	string to 'grep' for" >&2
    exit 1
}

Msg () {
    for i
    do errcho "$PN: $i"
    done
}

Fatal () { Msg "$@"; exit 1; }

# Check arguments before setting them
getopt hl "$@" > /dev/null 2>&1	|| Usage
set -- `getopt hl "$@"`
while [ $# -gt 0 ]
do
    case "$1" in
	-l)	set -- '.'; break;;	# List all errnos
	--)	shift; break;;
	-h)	Usage;;
	-*)	Usage;;
	*)	break;;			# First argument
    esac
    shift
done

[ $# -lt 1 ] && Usage

[ -s "$Signals" ] || {
    errcho "creating signal table (will be cached for faster lookup)..."
    umask 000				# Everybody may read and write
    : ${INCLUDE=/usr/include}
    find `echo "$INCLUDE" | tr : ' '`	\
    	    -follow			\
   	    -type f -name 'sig*.h' -print |
    sort -u |

    # Create "database" of signal values in the following format:
    #	1	SIGHUP	Hangup (POSIX)
    xargs $NAWK '
	# Example:
	# #define SIGHUP          1    /* Hangup (POSIX) */
	($1 == "#define") && ($2 ~ /^SIG[A-Z][A-Z]*$/) && (NF >= 3) {
	    # $2=name, $3=signum
	    Desc = ""
	    for ( i=4; i<=NF; i++ ) {
		if ( $i == "/*" || $i == "*/" ) continue;
		# Remove comment delimiters from description:
		#	"/*Not owner*/" -> "Not owner"
		if ( $i ~ /^\/\*/ ) {
		    sub (/\/\*[ 	]*/, "", $i)
		} else if ( $i ~ /\*\/$/ ) {
		    sub (/[ 	]*\*\/$/, "", $i)
		}
		if ( Desc == "" )
		    Desc = $i
		else
		    Desc = Desc " " $i
	    }
	    print $3 "	" $2 "	" Desc
	}
    ' > "$Signals" || exit	# awk will print error message
    [ -s "$Signals" ] || Fatal "could not find include file(s)"
}

# Search "database" for given strings
for i
do
    case "$i" in
	SIG[A-Z]*) Col=2;;	# Symbolic name given
	*[!0-9]*)		# No number: just grep for pattern
		$GREP -i "$i" "$Signals"
		continue;;
	*)	Col=1;;		# This seems to be a number
    esac
    $NAWK '$'$Col' == "'$i'"' "$Signals" | tail -n 1
done
