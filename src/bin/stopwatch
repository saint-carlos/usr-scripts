#!/bin/sh
# stopwatch
# A command-line Stopwatch

# Author: P&aacute;draig Brady
#    http://www.pixelbeat.org/scripts/sw
#    (Minor reformatting by ABS Guide author.)
#    Used in ABS Guide with script author's permission.
# Notes:
#    This script starts a few processes per lap, in addition to
#    the shell loop processing, so the assumption is made that
#    this takes an insignificant amount of time compared to
#    the response time of humans (~.1s) (or the keyboard
#    interrupt rate (~.05s)).
#    '?' for splits must be entered twice if characters
#    (erroneously) entered before it (on the same line).
#    '?' since not generating a signal may be slightly delayed
#    on heavily loaded systems.
#    Lap timings on ubuntu may be slightly delayed due to:
#    https://bugs.launchpad.net/bugs/62511
# Changes:
#    V1.0, 23 Aug 2005, Initial release
#    V1.1, 26 Jul 2007, Allow both splits and laps from single invocation.
#                       Only start timer after a key is pressed.
#                       Indicate lap number
#                       Cache programs at startup so there is less error
#                       due to startup delays.
#    V1.2, 01 Aug 2007, Work around `date` commands that don't have
#                       nanoseconds.
#                       Use stty to change interrupt keys to space for
#                       laps etc.
#                       Ignore other input as it causes problems.
#    V1.3, 01 Aug 2007, Testing release.
#    V1.4, 02 Aug 2007, Various tweaks to get working under ubuntu
#                       and Mac OS X.
#    V1.5, 27 Jun 2008, set LANG=C as got vague bug report about it.

export LANG=C

ulimit -c 0   # No coredumps from SIGQUIT.
trap '' TSTP  # Ignore Ctrl-Z just in case.
SAVE_TTY=$(stty -g) && trap "stty $SAVE_TTY" EXIT  # Restore tty on exit.
stty quit ' ' # Space for laps rather than Ctrl-\.
stty eof  '?' # ? for splits rather than Ctrl-D.
stty -echo    # Don't echo input.

cache_progs()
{
	stty > /dev/null
	date > /dev/null
	grep . < /dev/null
	(echo "import time" | python) 2> /dev/null
	bc < /dev/null
	sed '' < /dev/null
	printf '1' > /dev/null
	/usr/bin/time false 2> /dev/null
	cat < /dev/null
}

now()
{
	if [ "$USE_PYTHON" ]; then
		echo "import time; print time.time()" 2>/dev/null | python
	else
		printf "%.2f" $(date +%s.%N)
	fi
}

fmt_seconds()
{
	SECS=$1
	MINS=$(echo $SECS/60 | bc)
	if [ "$MINS" != "0" ]; then
		SECS=$(echo "$SECS - ($MINS*60)" | bc)
		echo "$MINS:$SECS"
	else
		echo "$SECS"
	fi
}

total()
{
	END=$(now)
	TOTAL=$(echo "$END - $START" | bc)
	fmt_seconds $TOTAL
}

stop()
{
	[ "$LAPPED" ] && lap "$LAPTIME" display
	total
	exit
}

lap()
{
	LAPTIME=$(echo "$1" | sed -n 's/.*real[^0-9.]*\(.*\)/\1/p')
	[ ! "$LAPTIME" -o "$LAPTIME" = 0.00 ] && return
	# Signals too frequent.
	LAPTOTAL=$(echo $LAPTIME+0$LAPTOTAL | bc)
	if [ "$2" = display ]; then
		LAPCOUNT=$(echo 0$LAPCOUNT+1 | bc)
		LAPTIME=$(fmt_seconds $LAPTOTAL)
		echo $LAPTIME "($LAPCOUNT)"
		LAPPED=true
		LAPTOTAL=0
	fi
}

cache_progs   # To minimise startup delay.
date +%s.%N | grep -qF 'N' && USE_PYTHON=1 # If $(date) lacks nanoseconds.

errcho -n "Space for lap | ? for split | Ctrl-C to stop | Space to start..."
while true; do
	trap true INT QUIT  # Set signal handlers.
	LAPTIME=$(/usr/bin/time -p 2>&1 cat >/dev/null)
	RC=$?
	trap '' INT QUIT    # Ignore signals within this script.
	if [ $RC -eq 1 -o $RC -eq 2 -o $RC -eq 130 ]; then # SIGINT = stop
		[ ! "$START" ] && { errcho; exit; }
		stop
	elif [ $RC -eq 3 -o $RC -eq 131 ]; then             # SIGQUIT = lap
		if [ ! "$START" ]; then
			START=$(now) || exit 1
			errcho
			continue
		fi
		lap "$LAPTIME" display
	else                # eof = split
		[ ! "$START" ] && continue
		total
		lap "$LAPTIME"  # Update laptotal.
	fi
done

exit $?
