#!/bin/bash

set -o pipefail -o errexit -o nounset

declare -r PROGRAM=$(basename $0)
declare -r DESCRIPTION="find the organization owning an IP/domain"
declare -r PARAMS="<ip-address|domain-name>..."
declare -r OPTIONS="[-h]"

if [ "$(uname -s)" = 'Darwin' ]; then
	WHOIS_ARGS=("-R")
else
	WHOIS_ARGS=()
fi

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS

options:
-h	help: show this help message and exit.

exit status:
0	OK
1	query error
2	usage error
EOF

	exit $1
}

extract_ip()
{
	grep "$@" -x -P '\b(?:\d{1,3}\.){3}\d{1,3}\b'
}

dig_ip()
{
	[ "$1" != "" ] || return 1
	timeout 3s dig +short "$@" \
		| tail -n 1 \
		| extract_ip
}

is_ip()
{
	echo "$1" | extract_ip -q
}

is_hostname()
{
	[[ "$*" =~ \. ]]
}

ungrep_i()
{
	awk "
		BEGIN	{ IGNORECASE=1; FOUND=0; }
		/$1/	{ FOUND=1 }
			{ print }
		END	{ exit FOUND }
	"
}

whois_exec()
{
	timeout 3s whois "${WHOIS_ARGS[@]}" "$@" 2>/dev/null | ungrep_i "no match"
}

get_registration()
{
	whois_exec "$@" \
		| grep -i \
			-e "^org.*name" \
			-e "^organi[sz]ation" \
			-e "^netname" \
			-e "^descr" \
			-e "^country" \
			-e "^aut-num" \
			-e "^owner" \
			-e "^ownerid" \
			-e "^Registrant Name" \
			-e "^Registrant Organization" \
			-e "^Registrant Country" \
		| tr -d '\r'
}

get_certificate()
{
	timeout 3s openssl s_client \
		-showcerts \
		-servername "$DOMAIN" \
		-connect "${DOMAIN}:443" \
		-brief \
		</dev/null 2>&1 \
		| grep '^Peer certificate:' \
		| grep -E -o \
			-e '\<O = (("[^"]*")|([^,]*))' \
			-e '\<CN = (("[^"]*")|([^,]*))' \
			-e '\<C = (("[^"]*")|([^,]*))' \
			-e '\<ST = (("[^"]*")|([^,]*))' \
			-e '\<L = (("[^"]*")|([^,]*))' \
			-e '\<businessCategory = (("[^"]*")|([^,]*))' \
			-e '\<jurisdictionC = (("[^"]*")|([^,]*))' \
			-e '\<jurisdictionST = (("[^"]*")|([^,]*))' \
		| sed 's/ = /: /'
}

expand_domain()
{
	cut -d . -f 2- <<< "$1"
}

get_domain_org()
{
	local DOMAIN="$1"
	local HAS_REGISTRATION=false HAS_CERTIFICATE=false HAS_IP=false
	local RRC=3 RC
	while is_hostname "$DOMAIN" && [ $RRC -gt 0 ]; do
		if ! $HAS_REGISTRATION; then
			RC=0
			get_registration "$DOMAIN" | sed 's/:/: whois: /' || RC=1
			if [ $RC -eq 0 ]; then
				((RRC--))
				HAS_REGISTRATION=true
			fi
		fi
		if ! $HAS_IP; then
			RC=0
			dig +short "$DOMAIN" | sed 's/^/z: dns: /' || RC=1
			if [ $RC -eq 0 ]; then
				((RRC--))
				HAS_IP=true
			fi
		fi
		if ! $HAS_CERTIFICATE && $HAS_IP; then
			RC=0
			get_certificate "$DOMAIN" | sed 's/:/: cert: /' || RC=1
			if [ $RC -eq 0 ]; then
				((RRC--))
				HAS_CERTIFICATE=true
			fi

		fi
		DOMAIN=$(expand_domain "$DOMAIN")
	done
	return $RRC
}

reverse_dns()
{
	dig +short -x "$@"
}

query()
{
	local -r OBJECT="$1"
	local RC=0
	printf "A: arg: %s\n" "$OBJECT"
	if is_ip "$OBJECT"; then
		local -r IP="$OBJECT"
	else
		local DOMAIN="$OBJECT"
		get_domain_org "$DOMAIN" || RC=1
		local IP
		IP=$(dig_ip "$@") || RC=1
	fi
	get_registration "$IP" | sed 's/:/: whois: /' || RC=1
	reverse_dns "$IP" | sed 's/^/hostname: rdns: /' || RC=1
	return $RC
}

while getopts h OPTION; do
	case $OPTION in
		h) usage 0 ;;
		\?) usage 1 ;;
	esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
	usage 2
fi

for OBJECT in "$@"; do
	query "$OBJECT" \
	| sort -u \
	| sed 's/  */ /g' \
	| column -s : -t
done
