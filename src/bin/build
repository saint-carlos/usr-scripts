#!/usr/bin/env bash

PROGRAM=$(basename $0)
DESCRIPTION="start the build system."
PARAMS="[make arguments]"
OPTIONS="[-hlprs] [-f err-filter]"
PTS=$(tty | xargs basename)
BUILD_LOG_PREFIX=/tmp/buildlog
ERROR_LOG_PREFIX=/tmp/errlog
BUILD_LOG="${BUILD_LOG_PREFIX}-pts-${PTS}"
ERROR_LOG="${ERROR_LOG_PREFIX}-pts-${PTS}"
STDERR=/proc/$PPID/fd/2
ERROR_COLOR=red
STDERR_FAIL=false
COMMAND=build
PARALLEL="-j $(system_cpu_count)"
CLEAN=false
ERROR_OUTPUT=cat

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS

options:
-h	help: show this help message and exit.
-p	problems: show the problems in the log.
-l	log: show the build log.
-r	rebuild: clean before build.
-s	serial: build serially, not in parallel.
-f	error filter: shell command to be used as a shell command to filter stderr.
-e	stderr: fail if something was emitted to stderr, even if make succeeded.

be sure to properly escape/quote the filter.

exit status:
2	some arguments are bad.
1	there were build errors for building and showing problems or if 'make' returned an error.
it is the return value from 'less' for showing the log.
otherwise it is 0.
EOF
    exit $1
}

last_log()
{
	echo "$BUILD_LOG"
}

show_log()
{
	less "$(last_log)"
}

show_problems()
{
	eval "$ERROR_OUTPUT" < "$ERROR_LOG"
}

beep()
{
	tput bel
	sleep 1
	tput bel
	sleep 1
	tput bel
}

build()
{
	if cmd_exists update_clock.sh; then
		update_clock.sh
	fi
	$CLEAN && make "$@" clean
	rm -f "$BUILD_LOG" "$ERROR_LOG"
	time make $PARALLEL "$@" \
		2> >(tee -a "$BUILD_LOG" "$ERROR_LOG" \
				| color "$ERROR_COLOR" > $STDERR) \
		| tee -a "$BUILD_LOG"
	RC=${PIPESTATUS[0]}
	if $STDERR_FAIL; then
		RC=1
		PROBLEM_COUNT=$(show_problems | wc -l | awk '{ print $1 }')
		COLORTERM="$ERROR_COLOR"
		if [ $PROBLEM_COUNT -eq 0 ]; then
			PROBLEM_COUNT=no
			COLORTERM=normal
			RC=0
		fi
		color_echo -n "$COLORTERM" "there were ${PROBLEM_COUNT} errors/warnings."
	fi
	echo " log file: $BUILD_LOG. error log: $ERROR_LOG."
	beep &
	if grep 'make returned error' $BUILD_LOG >/dev/null; then
		RC=$(grep 'make returned error' $BUILD_LOG | awk '{print $NF }')
	fi
	return $RC
}

while getopts hlprsf:e OPTION; do
	case $OPTION in
		h) usage 0 ;;
		l) COMMAND=show_log ;;
		p) COMMAND=show_problems ;;
		r) CLEAN=true ;;
		s) PARALLEL="" ;;
		f) ERROR_OUTPUT="$OPTARG" ;;
		e) STDERR_FAIL=true ;;
		\?) usage 2 ;;
	esac
done
shift $((OPTIND - 1))

$COMMAND "$@"
