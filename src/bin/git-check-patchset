#!/bin/bash

PROGRAM=$(basename $0)
DESCRIPTION="sanity test a patchset"
PARAMS="[revision-range]"
OPTIONS="[-hpr]"

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS
test a revision range using:
* checkpatch
* sparse
* build

for now its geared towards tfs2 (take a look at the code) and might generate false positives is used to test the whole kernel tree instead of a specific module. if no revision range is given, attempt to continue from the last execution.

options:
-h	help: show this help message and exit.
-p	pause: pause after each compilation, typically to manually test the patch.
-r	review: interactively review the patch

exit status:
0	if all arguments are OK
1	checkout failed
2	checkpatch failed
3	kernel config failed
4	build failed
5	sparse failed
6	internal error: revision management
254	if some arguments are bad
255	if the current working directory is not a the root of a git repo or is dirty
EOF
    exit $1
}

check_patch()
{
	git format-patch --stdout HEAD^.. | ./scripts/checkpatch.pl --mailback -
}

tree_dirty()
{
	git status --porcelain | grep -v '^??'
}

clean_files()
{
	rm "$STDERR"
	$PAUSE || rm "$REVLIST"
}

touch_patch()
{
	git stat | grep '|' | awk '{ print $1 }' | xargs touch
}

if [ ! -d .git ]; then
	echo "not git repo"
	exit 255
fi

if tree_dirty; then
	echo "dirty tree"
	exit 255
fi

PAUSE=false
REVIEW=false
while getopts hpr option; do
	case $option in
		h) usage 0 ;;
		p) PAUSE=true ;;
		r) REVIEW=true ;;
		\?) usage 254 ;;
	esac
done
shift `expr $OPTIND - 1`

CPU_COUNT=$(nproc)
REVLIST=".${PROGRAM}-todo"
STDERR=$(mktemp)
trap clean_files EXIT INT QUIT TERM

HEAD=$(cat .git/HEAD)
echo "original revision: $HEAD"

if [ $# -eq 0 ]; then
	PAUSE=true
else
	git log --reverse --format="%H"  "$@" > "$REVLIST"
fi

BUILD_ERROR=false
for REVISION in $(cat "$REVLIST"); do
	git checkout $REVISION || exit 1
	check_patch || exit 2
	make oldconfig || exit 3
	make -j $CPU_COUNT || BUILD_ERROR=true
	touch_patch
	make -j $CPU_COUNT C=1 fs/ lib/ 2>"$STDERR" || BUILD_ERROR=true
	if grep -v 'Nothing to be done for' "$STDERR"; then
		echo "errors encountered."
		if $BUILD_ERROR; then
			exit 4
		else
			exit 5
		fi
	fi
	$REVIEW && git show --patch-with-stat --summary -U50
	sed -i -e "/$REVISION/d" "$REVLIST" || exit 6
	if $PAUSE; then
		echo "pausing"
		exit 0
	fi
done

echo "you can now go back to $HEAD"
