#!/bin/bash
##########################################################################
# Title      :	permute - print permutations
# Author     :	Heiner Steven <heiner.steven@odn.de>
# Date       :	2005-01-19
# Category   :	Text Utilities
# Requires   :	nawk
# SCCS-Id.   :	@(#) permute	1.2 05/01/19
##########################################################################
# Description
#	Prints all permutations of the input arguments, e.g.
#	    $ permute a b c
#	results in
#	    a b c
#	    a c b
#	    c a b
#	    c b a
#	    a b c
#	    a c b
#
#	Since the number of output lines is the factorial of the number
#	of arguments, the resulting output can be very large. Three
#	arguments produce 3*2*1 = 6 lines of output, 5 arguments result
#	in 5*4*3*2*1 = 120 lines, 10 arguments already yield 3628800
#	output lines. Use with care.
#
# Notes
#    o	Elements cannot have embedded whitespace (this could be changed
#	in the AWK program by defining a distinct delimiter)
#    o	All elements must fit into one single AWK string
##########################################################################

PROGRAM=$(basename $0)
VER='1.3'
DESCRIPTION="print permutations, $VER"
PARAMS="[arg ...]"
OPTIONS="[-h]"

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS
Prints all permutations of the arguments.

Note that the number of output lines is the factorial of the number of
the command line arguments, which increases fast:

	# of arguments	# of output lines
	-------------- 	-----------------
	2		2
	3		3*2*1 = 6
	...
	10		3628800"

options:
-h	help: show this help message and exit.
-a:	print permutations of all sub-sequences as well (slow)
-p:	print the power set of the arguments
EOF

    exit $1
}

MODE=normal
while getopts aph OPTION; do
	case $OPTION in
		h) usage 0 ;;
		a) MODE=all ;;
		p) MODE=power ; CMD="$SHELL $0 -p" ;;
		\?) usage 1 ;;
	esac
done
shift $((OPTIND - 1))

if ${SUBSET_PERMUTE:-false}; then
	SEQ=( "$@" )
	NSEQ=$#
	export SUBSET_PERMUTE=false
	for (( i= 1 ; i <= $NSEQ ; i++ )); do
		CURRENT_SEQ=""
		for (( j=0 ; j < i ; j++ )); do
			CURRENT_SEQ="${CURRENT_SEQ} ${SEQ[j]}"
		done
		"$0" ${CURRENT_SEQ}
	done
	exit
elif [ $MODE = all ]; then
	export SUBSET_PERMUTE=true
	"$0" "$@" | xargs -l1 "$0" | sort | uniq
	exit
elif [ $MODE = power ]; then
	if [ $# -eq 0 ]; then
		echo
		exit
	fi

	CURRENT="$1"
	shift
	$CMD "$@" | while read R; do
		echo "$CURRENT $R"
		echo "$R"
	done
	exit
fi

exec <<< "$*" awk '
    	# permute - print permutations of elem[start...n]

	function permute(s, start, 		i, j, n, tmp) {

	    # We need a copy of all elements (elem[]) for each instance
	    # of this recursively called function. Since AWK does never
	    # keep a copy of an array, we use the string "s" as storage.

	    n = split(s, elem)
	    if (start > n) {			# End of recursion
	    	print s
		return
	    }

	    # Put each element in turn to the front of the list, and
	    # print all permutations starting with this element.

	    for (i=start; i<=n; i++) {
	    	if (i != start) {
		    # Exchange elem[start] and elem[i]
		    tmp = elem[start]; elem[start] = elem[i]; elem[i] = tmp
		    nextstr = elem[1]
		    for (j=2; j<=n; j++) nextstr = nextstr delim elem[j]
		} else {
		    nextstr = s
		}

		# Recursively process all possible lists, keeping only
		# the first elementof the list constant.

		permute(nextstr, start+1)

		# The previous recursion probably modified our global
		# elem[] array. We have to reset it using our initial
		# input parameter "s"

		n = split(s, elem)
	    }
	}

	BEGIN {
	    delim = " "			# output field separator
	}

        {
	    # Recursively print all permutations of all fields in the
	    # input line
	    permute($0, 1)
	}
    '
