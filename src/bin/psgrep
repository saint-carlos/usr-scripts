#!/bin/bash

PROGRAM=`basename $0`
DESCRIPTION="get process info by part of its name."
PARAMS="string ..."
OPTIONS="[-hnd] [-o options]"

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS

options:
-h
	help: show this help message and exit.
-n
	no header: do not show the table header.
-o options
	options: pass options to grep. for example: "$PROGRAM -o iw" will call "grep -iw". if more than one string is given, this option is ignored.
-d
	D state: list processes in state D (uninterruptible sleep)

exit status:
0	all OK
1	arguments are bad
EOF

    exit $1
}

SHOW_HEADER=true
GREP_OPTIONS=""
DSTATE=false
while getopts hno:d option; do
	case ${option} in
		h) usage 0 ;;
		n) SHOW_HEADER=false ;;
		o) GREP_OPTIONS="${GREP_OPTIONS} -${OPTARG}" ;;
		d) DSTATE=true ;;
		\?) usage 1 ;;
	esac
done
shift `expr $OPTIND - 1`

if supported -m 1 grep "--color=auto" .; then
	if [ -t 1 ]; then
		GREP_OPTIONS="$GREP_OPTIONS --color=always"
	else
		GREP_OPTIONS="$GREP_OPTIONS --color=auto"
	fi
fi

if $DSTATE; then
	AWKCMD='{ if ($5 ~ ".*D.*") print }'
	DSTATE_FILTER="| awk '$AWKCMD'"
else
	DSTATE_FILTER=""
fi

filter_processes()
{
	case $# in
		0) cat;;
		1) grep $GREP_OPTIONS "$1";;
		*) mfilter "$@";;
	esac
}

# in order to avoid showing the our own processes, the strategy is to assume
# the shell has its own built-in 'echo' which will not fork to a new process,
# and therefore the pipeline will only fork one process at the time.
# this will cause our own processes to be first-class children of ourselves. of
# these children, we actually only care about 'ps' itself, so the point is to
# make sure that while we're executing ps, the only processes which belong to us
# are ps' process and $$.
PS_COMMAND='ps -o pid,ppid,user,flags,stat,wchan,tty,start,cmd -ww'
PROCESSES=`$PS_COMMAND -e`
PROCESSES=`echo "$PROCESSES" | egrep -v -e "^ *\<$$\>" -e "^[0-9]+ +\<$$\>"`
PROCESSES=`echo "$PROCESSES" | eval tail -n +2 "$DSTATE_FILTER" | filter_processes "$@"`
if [ -n "$PROCESSES" ]; then
	$SHOW_HEADER && $PS_COMMAND | head -n 1
	echo "$PROCESSES"
fi

exit 0
