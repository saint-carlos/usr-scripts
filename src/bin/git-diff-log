#!/bin/bash

#!/bin/bash

PROGRAM=$(basename $0)
DESCRIPTION="diff between logs"
PARAMS="revision-range revision-range"
OPTIONS="[-h]"

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS
revision-range can be a single commit.

options:
-h	help: show this help message and exit.

exit status:
254	arguments have no common base
255	bad arguments
otherwise same as vimdiff
EOF
    exit $1
}

if [ "$1" = "-h" ]; then
	usage 0
fi
ARGS=( "$@" )
for ((i=0; i < ${#ARGS[@]}; i++)); do
	[ "${ARGS[i]}" = '--' ] && break
done
[ $i -ge 2 ] || usage 255
LIDX=$((i - 2))
RIDX=$((i - 1))
START=$LIDX
END=$i
LEFT="${ARGS[LIDX]}"
RIGHT="${ARGS[RIDX]}"
unset ARGS[LIDX]
unset ARGS[RIDX]
[[ "$LEFT" =~ ^- ]] && usage 255
[[ "$RIGHT" =~ ^- ]] && usage 255

LEFT_BASE=0
RIGHT_BASE=0
[[ "$LEFT" =~ \.\. ]] && LEFT_BASE=1
[[ "$RIGHT" =~ \.\. ]] && RIGHT_BASE=1
[ $LEFT_BASE -eq $RIGHT_BASE ] || usage 255

if [ $LEFT_BASE -ne 1 ] ; then
	BASE=$(git merge-base "$LEFT" "$RIGHT")
	if [ $? -ne 0 ] ; then
		errcho "'$LEFT' and '$RIGHT_BASE' don't seem to have common base!"
		exit 254
	fi
	LEFT_BASE="${BASE}^.."
	RIGHT_BASE="${BASE}^.."
else
	LEFT_BASE=""
	RIGHT_BASE=""
fi

exec vimdiff -c 'set diffexpr=GitDiffLog()' \
	<(git log "${ARGS[@]:0:${START}}" "${LEFT_BASE}${LEFT}" "${ARGS[@]:${END}}") \
	<(git log "${ARGS[@]:0:${START}}" "${RIGHT_BASE}${RIGHT}" "${ARGS[@]:${END}}")
