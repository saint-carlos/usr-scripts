#!/usr/bin/env bash

declare -r PROGRAM=$(basename $0)
declare -r DESCRIPTION="print name and description of http error codes"
declare -r PARAMS="{number|regex} [...]"
declare -r OPTIONS="[-hvlH] [-s number]"
declare -r CODES=CONFIG_SHARE/http.db

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS
number:	HTTP status code, e.g. 204
name:	system error name, e.g. "No Content"
regex:	string to grep for

options:
-l	list: list all error codes.
-v	verbose: emit a more verbose explanation for codes.
-H	no headers: do look up headers e.g. "4xx".
-s	section: limit output to specific section e.g. "3xx".
-h	help: show this help message and exit.
EOF

    exit $1
}

shorten()
{
	cut -d: -f1 "$@"
}

no_headers()
{
	grep -v '^[0-9]xx'
}

search()
{
	local GREP_ARGS=()
	local ARG
	for ARG in "$@"; do
		case "$ARG" in
		[0-9]*) GREP_ARGS+=("-e" "^${ARG}") ;;
		*) GREP_ARGS+=("-e" "$ARG") ;;
		esac
	done

	grep -i "${GREP_ARGS[@]}"
}

main()
{
	local LIST=false
	local SECTION=".*"
	local TRANSFORM=shorten
	local FILTER=cat

	while getopts hlvs:H OPTION; do
		case $OPTION in
		h) usage 0 ;;
		l) LIST=true ;;
		s) SECTION="${OPTARG:0:1}" ;;
		v) TRANSFORM=cat ;;
		H) FILTER=no_headers ;;
		\?) usage 1 ;;
		esac
	done
	shift $((OPTIND - 1))

	if $LIST; then
		set -- .
	fi

	[ $# -ge 1 ] || usage 1
	< "$CODES" \
		$TRANSFORM \
		| $FILTER \
		| grep "^${SECTION}" \
		| search "$@"
}

main "$@"
