#!/bin/bash
# ramdisk.sh

#  A "ramdisk" is a segment of system RAM memory
#+ which acts as if it were a filesystem.
#  Its advantage is very fast access (read/write time).
#  Disadvantages: volatility, loss of data on reboot or powerdown.
#+                less RAM available to system.
#
#  Of what use is a ramdisk?
#  Keeping a large dataset, such as a table or dictionary on ramdisk,
#+ speeds up data lookup, since memory access is much faster than disk access.

PROGRAM=$(basename $0)
DESCRIPTION="mount a ramdisk"
PARAMS="[mount-point]"
OPTIONS="[-h] [-s size] [-d device]"
E_NON_ROOT_USER=70             # Must run as root.

DEFAULT_MOUNT_POINT=/mnt/ramdisk
SIZE=2000
BLOCKSIZE=1024                 # 1K (1024 byte) block size
DEFAULT_DEVICE=/dev/ram0       # First ram device

usage()
{
	[ $1 -ne 0 ] && exec >&2

	cat << EOF
$PROGRAM - $DESCRIPTION
usage:
$PROGRAM $OPTIONS $PARAMS
the default mount point is $DEFAULT_MOUNT_POINT

options:
-h
	help: show this help message and exit.
-d device
	device on which to mount the ramdisk.the default device is $DEFAULT_DEVICE.
-s size
	size (in 1KB blocks) of the file system. default is $SIZE.

exit status:
0	all OK
1	arguments are bad
2	cannot zero device
3	cannot format device
4	cannot mount device
5	cannot chmod mount point
EOF

	exit $1
}

die()
{
	RC=$1
	shift
	errcho "$*"
	exit $RC
}

[ "$UID" -eq 0 ] || die $E_NON_ROOT_USER "Must be root to run $PROGRAM."

DEVICE=$DEFAULT_DEVICE
while getopts hd:s: OPTION; do
	case $OPTION in
		h) usage 0 ;;
		d) DEVICE=$OPTARG ;;
		s) SIZE=$OPTARG ;;
		\?) usage 1 ;;
	esac
done
shift $((OPTIND - 1))

MOUNTPT=${1:-$DEFAULT_MOUNT_POINT}
mkdir -p $MOUNTPT

dd if=/dev/zero of=$DEVICE count=$SIZE bs=$BLOCKSIZE || die 2 "failed to clear $DEVICE"
mke2fs $DEVICE || die 3 "failed to format $DEVICE"
mount $DEVICE $MOUNTPT || die 4 "failed to mount $DEVICE"
chmod 777 $MOUNTPT || die 5 "failed to chmod $MOUNTPT"

echo "\"$MOUNTPT\" now available for use."
exit 0
